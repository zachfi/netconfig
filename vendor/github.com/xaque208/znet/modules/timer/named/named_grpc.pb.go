// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package named

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamedClient is the client API for Named service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamedClient interface {
	Observe(ctx context.Context, in *NamedTimeStamp, opts ...grpc.CallOption) (*Empty, error)
	Schedule(ctx context.Context, in *NamedTimeStamp, opts ...grpc.CallOption) (*Empty, error)
}

type namedClient struct {
	cc grpc.ClientConnInterface
}

func NewNamedClient(cc grpc.ClientConnInterface) NamedClient {
	return &namedClient{cc}
}

func (c *namedClient) Observe(ctx context.Context, in *NamedTimeStamp, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/timer.Named/Observe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedClient) Schedule(ctx context.Context, in *NamedTimeStamp, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/timer.Named/Schedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamedServer is the server API for Named service.
// All implementations must embed UnimplementedNamedServer
// for forward compatibility
type NamedServer interface {
	Observe(context.Context, *NamedTimeStamp) (*Empty, error)
	Schedule(context.Context, *NamedTimeStamp) (*Empty, error)
	mustEmbedUnimplementedNamedServer()
}

// UnimplementedNamedServer must be embedded to have forward compatible implementations.
type UnimplementedNamedServer struct {
}

func (UnimplementedNamedServer) Observe(context.Context, *NamedTimeStamp) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observe not implemented")
}
func (UnimplementedNamedServer) Schedule(context.Context, *NamedTimeStamp) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedNamedServer) mustEmbedUnimplementedNamedServer() {}

// UnsafeNamedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamedServer will
// result in compilation errors.
type UnsafeNamedServer interface {
	mustEmbedUnimplementedNamedServer()
}

func RegisterNamedServer(s grpc.ServiceRegistrar, srv NamedServer) {
	s.RegisterService(&Named_ServiceDesc, srv)
}

func _Named_Observe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedTimeStamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedServer).Observe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Named/Observe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedServer).Observe(ctx, req.(*NamedTimeStamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Named_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedTimeStamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timer.Named/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedServer).Schedule(ctx, req.(*NamedTimeStamp))
	}
	return interceptor(ctx, in, info, handler)
}

// Named_ServiceDesc is the grpc.ServiceDesc for Named service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Named_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timer.Named",
	HandlerType: (*NamedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Observe",
			Handler:    _Named_Observe_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _Named_Schedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/timer/named/named.proto",
}
