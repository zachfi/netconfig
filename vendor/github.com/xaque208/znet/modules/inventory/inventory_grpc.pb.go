// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	ListNetworkHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListNetworkHostsClient, error)
	ListNetworkIDs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListNetworkIDsClient, error)
	ListZigbeeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListZigbeeDevicesClient, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) ListNetworkHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListNetworkHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Inventory_ServiceDesc.Streams[0], "/inventory.Inventory/ListNetworkHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryListNetworkHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Inventory_ListNetworkHostsClient interface {
	Recv() (*NetworkHost, error)
	grpc.ClientStream
}

type inventoryListNetworkHostsClient struct {
	grpc.ClientStream
}

func (x *inventoryListNetworkHostsClient) Recv() (*NetworkHost, error) {
	m := new(NetworkHost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryClient) ListNetworkIDs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListNetworkIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Inventory_ServiceDesc.Streams[1], "/inventory.Inventory/ListNetworkIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryListNetworkIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Inventory_ListNetworkIDsClient interface {
	Recv() (*NetworkID, error)
	grpc.ClientStream
}

type inventoryListNetworkIDsClient struct {
	grpc.ClientStream
}

func (x *inventoryListNetworkIDsClient) Recv() (*NetworkID, error) {
	m := new(NetworkID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryClient) ListZigbeeDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Inventory_ListZigbeeDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Inventory_ServiceDesc.Streams[2], "/inventory.Inventory/ListZigbeeDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryListZigbeeDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Inventory_ListZigbeeDevicesClient interface {
	Recv() (*ZigbeeDevice, error)
	grpc.ClientStream
}

type inventoryListZigbeeDevicesClient struct {
	grpc.ClientStream
}

func (x *inventoryListZigbeeDevicesClient) Recv() (*ZigbeeDevice, error) {
	m := new(ZigbeeDevice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility
type InventoryServer interface {
	ListNetworkHosts(*Empty, Inventory_ListNetworkHostsServer) error
	ListNetworkIDs(*Empty, Inventory_ListNetworkIDsServer) error
	ListZigbeeDevices(*Empty, Inventory_ListZigbeeDevicesServer) error
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (UnimplementedInventoryServer) ListNetworkHosts(*Empty, Inventory_ListNetworkHostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworkHosts not implemented")
}
func (UnimplementedInventoryServer) ListNetworkIDs(*Empty, Inventory_ListNetworkIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworkIDs not implemented")
}
func (UnimplementedInventoryServer) ListZigbeeDevices(*Empty, Inventory_ListZigbeeDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListZigbeeDevices not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_ListNetworkHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServer).ListNetworkHosts(m, &inventoryListNetworkHostsServer{stream})
}

type Inventory_ListNetworkHostsServer interface {
	Send(*NetworkHost) error
	grpc.ServerStream
}

type inventoryListNetworkHostsServer struct {
	grpc.ServerStream
}

func (x *inventoryListNetworkHostsServer) Send(m *NetworkHost) error {
	return x.ServerStream.SendMsg(m)
}

func _Inventory_ListNetworkIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServer).ListNetworkIDs(m, &inventoryListNetworkIDsServer{stream})
}

type Inventory_ListNetworkIDsServer interface {
	Send(*NetworkID) error
	grpc.ServerStream
}

type inventoryListNetworkIDsServer struct {
	grpc.ServerStream
}

func (x *inventoryListNetworkIDsServer) Send(m *NetworkID) error {
	return x.ServerStream.SendMsg(m)
}

func _Inventory_ListZigbeeDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServer).ListZigbeeDevices(m, &inventoryListZigbeeDevicesServer{stream})
}

type Inventory_ListZigbeeDevicesServer interface {
	Send(*ZigbeeDevice) error
	grpc.ServerStream
}

type inventoryListZigbeeDevicesServer struct {
	grpc.ServerStream
}

func (x *inventoryListZigbeeDevicesServer) Send(m *ZigbeeDevice) error {
	return x.ServerStream.SendMsg(m)
}

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNetworkHosts",
			Handler:       _Inventory_ListNetworkHosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNetworkIDs",
			Handler:       _Inventory_ListNetworkIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListZigbeeDevices",
			Handler:       _Inventory_ListZigbeeDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "modules/inventory/inventory.proto",
}
