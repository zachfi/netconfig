// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package telemetry

import (
	context "context"
	inventory "github.com/xaque208/znet/modules/inventory"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryClient interface {
	ReportIOTDevice(ctx context.Context, in *inventory.IOTDevice, opts ...grpc.CallOption) (*inventory.Empty, error)
	ReportNetworkID(ctx context.Context, in *inventory.NetworkID, opts ...grpc.CallOption) (*inventory.Empty, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) ReportIOTDevice(ctx context.Context, in *inventory.IOTDevice, opts ...grpc.CallOption) (*inventory.Empty, error) {
	out := new(inventory.Empty)
	err := c.cc.Invoke(ctx, "/telemetry.Telemetry/ReportIOTDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) ReportNetworkID(ctx context.Context, in *inventory.NetworkID, opts ...grpc.CallOption) (*inventory.Empty, error) {
	out := new(inventory.Empty)
	err := c.cc.Invoke(ctx, "/telemetry.Telemetry/ReportNetworkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
// All implementations must embed UnimplementedTelemetryServer
// for forward compatibility
type TelemetryServer interface {
	ReportIOTDevice(context.Context, *inventory.IOTDevice) (*inventory.Empty, error)
	ReportNetworkID(context.Context, *inventory.NetworkID) (*inventory.Empty, error)
	mustEmbedUnimplementedTelemetryServer()
}

// UnimplementedTelemetryServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (UnimplementedTelemetryServer) ReportIOTDevice(context.Context, *inventory.IOTDevice) (*inventory.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportIOTDevice not implemented")
}
func (UnimplementedTelemetryServer) ReportNetworkID(context.Context, *inventory.NetworkID) (*inventory.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNetworkID not implemented")
}
func (UnimplementedTelemetryServer) mustEmbedUnimplementedTelemetryServer() {}

// UnsafeTelemetryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServer will
// result in compilation errors.
type UnsafeTelemetryServer interface {
	mustEmbedUnimplementedTelemetryServer()
}

func RegisterTelemetryServer(s grpc.ServiceRegistrar, srv TelemetryServer) {
	s.RegisterService(&Telemetry_ServiceDesc, srv)
}

func _Telemetry_ReportIOTDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(inventory.IOTDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).ReportIOTDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Telemetry/ReportIOTDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).ReportIOTDevice(ctx, req.(*inventory.IOTDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_ReportNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(inventory.NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).ReportNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.Telemetry/ReportNetworkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).ReportNetworkID(ctx, req.(*inventory.NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

// Telemetry_ServiceDesc is the grpc.ServiceDesc for Telemetry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telemetry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportIOTDevice",
			Handler:    _Telemetry_ReportIOTDevice_Handler,
		},
		{
			MethodName: "ReportNetworkID",
			Handler:    _Telemetry_ReportNetworkID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/telemetry/telemetry.proto",
}
